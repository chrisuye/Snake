{"version":3,"sources":["Snake.js","Food.js","App.js","reportWebVitals.js","index.js"],"names":["Snake","snakeDots","map","dot","index","className","style","left","top","Food","food","getRandomCoordinates","Math","floor","random","initalState","speed","difficulty","level","direction","score","xDown","yDown","Game","updateState","swipeHandlers","useSwipeable","onSwipedUp","onSwipedDown","onSwipedLeft","onSwipedRight","localStorage","getItem","SelectLevel","setDifficulty","onClick","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","getTouches","touches","originalEvent","handleTouchStart","firstTouch","clientX","clientY","handleTouchMove","xUp","yUp","xDiff","yDiff","abs","increaseSpeed","value","setInterval","this","document","onkeydown","addEventListener","onTouchStart","onTouchMove","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","snake","gameOver","pop","forEach","enlargeSnake","increaseScore","unshift","setItem","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d81013c8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Snake = ({ snakeDots }) => {\n    \n    return (\n        <div>\n            {snakeDots.map((dot, index) => {\n                return (\n                    <div key={index} className=\"snake-dot\" style={{ left: `${dot[0]}%`, top: `${dot[1]}%` }} />\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Snake;","import React from 'react';\n\nconst Food = ({ food }) => {\n\n    const style = {\n        left : `${food[0]}%`,\n        top : `${food[1]}%`\n    }\n\n  return (\n    <div className='snake-food' style={style}>\n      \n    </div>\n  )\n}\n\nexport default Food;","import React, { Component } from 'react';\nimport { useSwipeable } from \"react-swipeable\";\nimport Snake from './Snake';\nimport Food from './Food';\nimport './App.css';\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initalState = {\n  food: getRandomCoordinates(),\n  speed: 100,\n  difficulty: null,\n  level: null,\n  direction: 'RIGHT',\n  snakeDots: [\n    [0, 0],\n    [2, 0],\n  ],\n  score: 0,\n  xDown: null,\n  yDown: null,\n}\n\nconst Game = ({ updateState, direction, score, snakeDots, food, level }) => {\n  const swipeHandlers = useSwipeable({\n    onSwipedUp: () => direction !== 'Down' ? updateState(3) : null,\n    onSwipedDown: () => direction !== 'UP' ? updateState(4) : null,\n    onSwipedLeft: () => direction !== 'RIGHT' ? updateState(2) : null,\n    onSwipedRight: () => direction !== 'LEFT' ? updateState(1) : null,\n  });\n  return (\n    <div className=\"snake\" {...swipeHandlers}>\n      <div className=\"score\">\n        <h1>Snake Game</h1>\n        <h2>Score: {score}</h2>\n        <h2>High Score: {localStorage.getItem('snakeScore')}</h2>\n        <h2>{level}</h2>\n      </div>\n      <div className='game-area'>\n        <Snake snakeDots={snakeDots}/>\n        <Food food={food} />\n      </div>\n    </div>\n  );\n}\n\nconst SelectLevel = ({ setDifficulty }) => {\n  return (\n    <div className=\"select\">\n      <h1>Snake Game</h1>\n      <h2>Select Difficulty</h2>\n      <div className=\"difficulty\">\n        <button onClick={() => setDifficulty(1)}>Easy</button>\n        <button onClick={() => setDifficulty(2)}>Medium</button>\n        <button onClick={() => setDifficulty(3)}>Hard</button>\n      </div>\n    </div>\n  )\n}\n\nclass App extends Component {\n  state = initalState\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n    document.addEventListener('touchstart', this.onTouchStart);\n    document.addEventListener('touchmove', this.onTouchMove);\n  };\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  };\n\n  onKeyDown = e => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 37:\n        if(this.state.direction !== 'RIGHT') {\n          this.setState({ direction: 'LEFT' });\n        }\n        break;\n      case 38:\n        if(this.state.direction !== 'DOWN') {\n          this.setState({ direction: 'UP' });\n        }\n        break;\n      case 39:\n        if(this.state.direction !== 'LEFT') {\n          this.setState({ direction: 'RIGHT' });\n        }\n        break;\n      case 40:\n        if(this.state.direction !== 'UP') {\n          this.setState({ direction: 'DOWN' });\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n    switch (this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 2, head[1]];\n        break;\n      case 'UP':\n        head = [head[0], head[1] - 2];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 2];\n        break;\n      default:\n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots\n    });\n  };\n\n  getTouches = e => {\n    return e.touches || e.originalEvent.touches;\n  }\n\n  handleTouchStart = e => {\n    const firstTouch = this.getTouches(e)[0];\n    this.setState({\n      xDown: firstTouch.clientX,\n      yDown: firstTouch.clientY\n    })\n  };\n\n  handleTouchMove = e => {\n    if (!this.state.xDown || !this.state.yDown) {\n      return;\n    }\n    let xUp = e.touches[0].clientX;\n    let yUp = e.touches[0].clientY;\n    let xDiff = this.state.xDown - xUp;\n    let yDiff = this.state.yDown - yUp;\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n      if (xDiff > 0) {\n        if(this.state.direction !== 'LEFT') {\n          this.setState({ direction: 'RIGHT' });  \n        }\n      } else {\n        if(this.state.direction !== 'RIGHT') {\n          this.setState({ direction: 'LEFT' });\n        }\n      }\n    } else {\n      if (yDiff > 0) {\n        if(this.state.direction !== 'UP') {\n          this.setState({ direction: 'DOWN' });\n        }\n      } else {\n        if(this.state.direction !== 'DOWN') {\n          this.setState({ direction: 'UP' });\n        }\n      }\n    }\n    this.setState({\n      xDown: null,\n      yDown: null,\n    });\n  };\n\n  checkIfOutOfBorders() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.gameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        this.gameOver();\n      }\n    });\n  }\n\n  checkIfEat() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      });\n      this.enlargeSnake();\n      this.increaseSpeed();\n      this.increaseScore();\n    }\n  }\n\n  increaseScore() {\n    this.setState({\n      score: this.state.score + 1\n    });\n  }\n\n  enlargeSnake() {\n    let snake = [...this.state.snakeDots];\n    snake.unshift([]);\n    this.setState({\n      snakeDots: snake\n    });\n  }\n\n  increaseSpeed = () => {\n    let speed = this.state.speed;\n    if (speed > this.difficulty) {\n      speed -= this.difficulty;\n      this.setState({\n        speed: speed\n      });\n    }\n  }\n\n  gameOver() {\n    localStorage.setItem('snakeScore', this.state.score > localStorage.getItem('snakeScore') ? this.state.score : localStorage.getItem('snakeScore'));\n    this.setState(initalState);\n  }\n\n  updateState = (value) => {\n    if (value === 1) {\n      this.setState({\n        direction: 'RIGHT'\n      });\n    } else if (value === 2) {\n      this.setState({\n        direction: 'LEFT'\n      });\n    } else if (value === 3) {\n      this.setState({\n        direction: 'UP'\n      });\n    } else if (value === 4) {\n      this.setState({\n        direction: 'DOWN'\n      });\n    }\n  }\n\n  setDifficulty = (value) => {\n    if (value === 1) {\n      this.setState({\n        speed: 100,\n        difficulty: 10,\n        level: 'EASY'\n      });\n    } else if (value === 2) {\n      this.setState({\n        speed: 50,\n        difficulty: 5,\n        level: 'MEDIUM'\n      });\n    } else if (value === 3) {\n      this.setState({\n        speed: 25,\n        difficulty: 2,\n        level: 'HARD'\n      });\n    }\n  }\n\n  render() {\n    return (this.state.difficulty === null) ? (<SelectLevel setDifficulty={this.setDifficulty} /> ): (\n      <Game\n        updateState={this.updateState}\n        direction={this.state.direction}\n        snakeDots={this.state.snakeDots}\n        food={this.state.food}\n        score={this.state.score}\n        level={this.state.level}\n      />\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}